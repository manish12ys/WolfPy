name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,all-databases]
    
    - name: Run tests
      run: pytest tests/ -v --cov=wolfpy --cov-report=term-missing
    
    - name: Run linting
      run: |
        flake8 src/wolfpy tests --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check src/wolfpy tests

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine toml
    
    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Update version in pyproject.toml
      if: github.event_name == 'workflow_dispatch'
      run: |
        python -c "
        import toml
        with open('pyproject.toml', 'r') as f:
            data = toml.load(f)
        data['project']['version'] = '${{ steps.version.outputs.version }}'
        with open('pyproject.toml', 'w') as f:
            toml.dump(data, f)
        "
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-${{ steps.version.outputs.version }}
        path: dist/
        retention-days: 30

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, build]
    environment: release
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-${{ needs.build.outputs.version }}
        path: dist/
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true
    
    - name: Publish to PyPI
      if: github.event_name == 'push' || !github.event.inputs.prerelease
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, build, publish-pypi]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-${{ needs.build.outputs.version }}
        path: dist/
    
    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.build.outputs.version }}"
        
        # Extract changelog for this version
        if [[ -f CHANGELOG.md ]]; then
          # Get content between this version and the next version header
          CHANGELOG=$(awk "/## \[$VERSION\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md || echo "No changelog found for this version.")
        else
          CHANGELOG="Release v$VERSION"
        fi
        
        # Save to file for multiline output
        echo "$CHANGELOG" > changelog.txt
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat changelog.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build.outputs.version }}
        release_name: WolfPy v${{ needs.build.outputs.version }}
        body: |
          # WolfPy v${{ needs.build.outputs.version }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          ```bash
          pip install wolfpy==${{ needs.build.outputs.version }}
          ```
          
          ## What's Changed
          
          See the [full changelog](https://github.com/manish12ys/wolfpy/blob/main/CHANGELOG.md) for details.
          
          ## Assets
          
          - **Source code** (zip/tar.gz): Automatic GitHub archives
          - **Python packages**: Available on [PyPI](https://pypi.org/project/wolfpy/${{ needs.build.outputs.version }}/)
        draft: false
        prerelease: ${{ github.event.inputs.prerelease == 'true' }}
    
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/
        asset_name: wolfpy-${{ needs.build.outputs.version }}-dist.zip
        asset_content_type: application/zip

  docker-release:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: wolfpy/wolfpy
        tags: |
          type=semver,pattern={{version}},value=v${{ needs.build.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=v${{ needs.build.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, docker-release]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.create-release.result == 'success' && needs.docker-release.result == 'success'
      run: |
        echo "üéâ Release v${{ needs.build.outputs.version }} completed successfully!"
        echo "üì¶ PyPI: https://pypi.org/project/wolfpy/${{ needs.build.outputs.version }}/"
        echo "üê≥ Docker: https://hub.docker.com/r/wolfpy/wolfpy"
        echo "üìã GitHub: https://github.com/manish12ys/wolfpy/releases/tag/v${{ needs.build.outputs.version }}"
    
    - name: Notify Failure
      if: needs.create-release.result == 'failure' || needs.docker-release.result == 'failure'
      run: |
        echo "‚ùå Release failed. Check the logs for details."
        exit 1
